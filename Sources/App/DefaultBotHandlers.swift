//
//  File.swift
//  
//
//  Created by –•–∞–ª–∏–º–∫–∞ on 10.04.2024.
//

import Foundation

/// C–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–º–∞–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –º–µ—Ç–æ–¥—ã —Ç–∏–ø–∞ defaultBaseHandler, messageHandler, commandPingHandler, commandShowButtonsHandler –∏ buttonsActionHandler.

import Vapor
import TelegramVaporBot

final class DefaultBotHandlers {

    static func addHandlers(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await defaultBaseHandler(app: app, connection: connection)
        await messageHandler(app: app, connection: connection)
        await commandPingHandler(app: app, connection: connection)
        await commandShowButtonsHandler(app: app, connection: connection)
        await buttonsActionHandler(app: app, connection: connection)
    }
    
    /// Handler for all updates
    private static func defaultBaseHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGBaseHandler({ update, bot in
            guard let message = update.message else { return }
            let params: TGSendMessageParams = .init(chatId: .chat(message.chat.id), text: "TGBaseHandler")
            try await connection.bot.sendMessage(params: params)
        }))
        
        await connection.dispatcher.add(TGBaseHandler { update, bot in
                   guard let userId = update.message?.from?.id else { return }

                   // –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                   let welcomeMessage = """
                   ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ RoadMap!\n üöÄ RoadMap - "–≠—Ç–æ –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:\n üë®üèª‚Äçüíª–ù–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ–ª–Ω—É—é –∏–º–∏—Ç–∞—Ü–∏—é —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –º–µ—Ç–æ–¥–∏–∫–µ Scrum.\n üèÉ‚Äç‚ôÇÔ∏è –ó–∞ –ø—è—Ç—å –º–µ—Å—è—Ü–µ–≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤—ã –æ—Å–≤–æ–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –Ω–∞ Swift, —Å–æ–∑–¥–∞–¥–∏—Ç–µ –±–æ–ª–µ–µ 15 –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\nüß© –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±—É–¥—É—â–µ–º—É:\n –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ IT.\n‚úä –≠—Ç–æ—Ç –∫—É—Ä—Å - –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—å–µ—Ä–µ –≤ –º–∏—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –≠—Ç–æ –Ω–∞—à–µ –º–µ–Ω—é.\n\n
                 üìñ –ö –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –º–µ–Ω—é:
                 """

                   // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                   let buttons: [[TGInlineKeyboardButton]] = [
                       [.init(text: "üåè –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ä–æ–∞–¥–º–∞–ø–µ –Ω–∞ —Å–∞–π—Ç–µ", callbackData: "/web_site")],
                       [.init(text: "üë®üèª‚Äçüíª –ü–æ–ª—É—á–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callbackData: "/send_file_with_button")]
                   ]

                   // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                   let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
                   
                   // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                   let params = TGSendPhotoParams(
                       chatId: .chat(userId),
                       photo: .url("https://disk.yandex.ru/i/q8WgWkEpRlF7xQ"),
                       caption: welcomeMessage,
                       replyMarkup: .inlineKeyboardMarkup(keyboard)
                   )

                   // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                   do {
                       try await connection.bot.sendPhoto(params: params)
                   } catch {
                       print("Failed to send message with image and buttons: \(error)")
                   }
               })
    }

    /// Handler for Messages
    private static func messageHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGMessageHandler(filters: (.all && !.command.names(["/ping", "/show_buttons"]))) { update, bot in
            let params: TGSendMessageParams = .init(chatId: .chat(update.message!.chat.id), text: "Success")
            try await connection.bot.sendMessage(params: params)
        })
    }

    /// Handler for Commands
    private static func commandPingHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCommandHandler(commands: ["/ping"]) { update, bot in
            try await update.message?.reply(text: "pong", bot: bot)
        })
    }

    /// Show buttons
    private static func commandShowButtonsHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCommandHandler(commands: ["/show_buttons"]) { update, bot in
            guard let userId = update.message?.from?.id else { fatalError("user id not found") }
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "Button 1", callbackData: "press 1"), .init(text: "Button 2", callbackData: "press 2")]
            ]
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "Keyboard active",
                                                    replyMarkup: .inlineKeyboardMarkup(keyboard))
            try await connection.bot.sendMessage(params: params)
        })
    }

    /// Handler for buttons callbacks
    private static func buttonsActionHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "/send_file_with_button") { update, bot in
                    guard let callbackQuery = update.callbackQuery else { return }
                    
                    let chatId: Int64 = callbackQuery.message?.chat.id ?? 0
                    
                    // –°—Å—ã–ª–∫–∞ –Ω–∞ Google –î–∏—Å–∫
                    let googleDriveLink = "https://disk.yandex.ru/i/jBYRyEuBvVaMkQ"
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç
                    let joinChatButton = TGInlineKeyboardButton(text: "–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ", url: "https://t.me/+fTcJSyJHOVQzNzdi")
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Google –î–∏—Å–∫
                    let driveButton = TGInlineKeyboardButton(text: "–°–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ", url: googleDriveLink)
                    
                    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    let keyboardMarkup = TGInlineKeyboardMarkup(inlineKeyboard: [[joinChatButton], [driveButton]])
                    
                    let messageText = """
        –í—ã—Å—ã–ª–∞—é —Ç–µ—Å—Ç–æ–≤–æ–µ
        –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª - 16 (–∑–∞–¥–∞–Ω–∏—è –æ–∫—Ä–∞—à–µ–Ω—ã –≤ –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç) –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é
        —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 6 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        –ù—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        """
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    let messageParams = TGSendMessageParams(chatId: .chat(chatId), text: messageText, replyMarkup: .inlineKeyboardMarkup(keyboardMarkup))
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    do {
                        try await bot.sendMessage(params: messageParams)
                    } catch {
                        print("Failed to send message with buttons: \(error)")
                    }
                })
        
        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "press 1") { update, bot in
            let params: TGAnswerCallbackQueryParams = .init(callbackQueryId: update.callbackQuery?.id ?? "0",
                                                            text: update.callbackQuery?.data  ?? "data not exist",
                                                            showAlert: nil,
                                                            url: nil,
                                                            cacheTime: nil)
            try await bot.answerCallbackQuery(params: params)
        })
        
        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "press 2") { update, bot in
            let params: TGAnswerCallbackQueryParams = .init(callbackQueryId: update.callbackQuery?.id ?? "0",
                                                            text: update.callbackQuery?.data  ?? "data not exist",
                                                            showAlert: nil,
                                                            url: nil,
                                                            cacheTime: nil)
            try await bot.answerCallbackQuery(params: params)
        })
    }
}
